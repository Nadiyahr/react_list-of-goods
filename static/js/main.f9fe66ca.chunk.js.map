{"version":3,"sources":["App.tsx","index.tsx"],"names":["ColumnTypes","goodsFromServer","App","state","listOrigin","listModified","isClicked","sortBy","reverse","displayList","setState","reverseHandler","sortHandler","type","resetHandler","this","sort","a","b","alpha","localeCompare","length","className","onClick","map","good","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAgBKA,E,kEAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,cAAAA,E,iBAAAA,M,SAaCE,E,4MACJC,MAAe,CACbC,WAAYH,EACZI,aAAcJ,EACdK,WAAW,EACXC,OAAQ,GACRC,SAAS,G,EAGXC,YAAc,WACZ,EAAKC,UAAS,SAAAP,GAAK,MAAK,CACtBG,WAAYH,EAAMG,e,EAItBK,eAAiB,kBACf,EAAKD,UAAS,SAAAP,GAAK,MAAK,CACtBK,SAAUL,EAAMK,a,EAIpBI,YAAc,SAACC,GAAD,OACZ,EAAKH,SAAS,CACZH,OAAQM,K,EAIZC,aAAe,kBACb,EAAKJ,UAAS,SAAAP,GAAK,MAAK,CACtBE,aAAcF,EAAMC,gB,4CAIxB,WAAU,IAAD,OACP,EAEIW,KAAKZ,MADPG,EADF,EACEA,UAAWD,EADb,EACaA,aAAcG,EAD3B,EAC2BA,QAASD,EADpC,EACoCA,OAoBpC,OAjBIC,GACFH,EAAaG,UAGXD,GACFF,EAAaW,MAAK,SAACC,EAAGC,GACpB,OAAQX,GACN,KAAKP,EAAYmB,MACf,OAAOF,EAAEG,cAAcF,GACzB,KAAKlB,EAAYqB,OACf,OAAOJ,EAAEI,OAASH,EAAEG,OACtB,QACE,OAAO,MAMb,sBAAKC,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,mBACA,wBACET,KAAK,SACLS,UAAS,mBAAchB,GAAa,cACpCiB,QAASR,KAAKN,YAHhB,mBAOA,wBACEI,KAAK,SACLS,UAAS,oBAAehB,GAAa,cACrCiB,QAASR,KAAKJ,eAHhB,qBAOA,wBACEE,KAAK,SACLS,UAAS,oBAAehB,GAAa,cACrCiB,QAAS,kBAAM,EAAKX,YAAYZ,EAAYmB,QAH9C,iCAOA,wBACEN,KAAK,SACLS,UAAS,oBAAehB,GAAa,cACrCiB,QAASR,KAAKD,aAHhB,mBAOA,wBACED,KAAK,SACLS,UAAS,oBAAehB,GAAa,cACrCiB,QAAS,kBAAM,EAAKX,YAAYZ,EAAYqB,SAH9C,4BAOA,oBAAIC,UAAU,YAAd,SACGhB,GAAaD,EAAamB,KAAI,SAAAC,GAAI,OACjC,oBAEEH,UAAU,YAFZ,SAIGG,GAHIA,e,GAhGDC,aA4GHxB,ICtIfyB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f9fe66ca.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum ColumnTypes {\n  alpha = 'alpha',\n  length = 'length',\n}\n\ninterface State {\n  listOrigin: string[];\n  listModified: string[]\n  isClicked: boolean;\n  sortBy: ColumnTypes | '';\n  reverse: boolean;\n}\n\nclass App extends Component<{}, State> {\n  state: State = {\n    listOrigin: goodsFromServer,\n    listModified: goodsFromServer,\n    isClicked: false,\n    sortBy: '',\n    reverse: false,\n  };\n\n  displayList = () => {\n    this.setState(state => ({\n      isClicked: !state.isClicked,\n    }));\n  };\n\n  reverseHandler = () => (\n    this.setState(state => ({\n      reverse: !state.reverse,\n    }))\n  );\n\n  sortHandler = (type: ColumnTypes) => (\n    this.setState({\n      sortBy: type,\n    })\n  );\n\n  resetHandler = () => (\n    this.setState(state => ({\n      listModified: state.listOrigin,\n    }))\n  );\n\n  render() {\n    const {\n      isClicked, listModified, reverse, sortBy,\n    } = this.state;\n\n    if (reverse) {\n      listModified.reverse();\n    }\n\n    if (sortBy) {\n      listModified.sort((a, b) => {\n        switch (sortBy) {\n          case ColumnTypes.alpha:\n            return a.localeCompare(b);\n          case ColumnTypes.length:\n            return a.length - b.length;\n          default:\n            return 0;\n        }\n      });\n    }\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">Goods</h1>\n        <button\n          type=\"button\"\n          className={`App__btn ${isClicked && 'App__hiden'}`}\n          onClick={this.displayList}\n        >\n          Start\n        </button>\n        <button\n          type=\"button\"\n          className={`App__btn ${!isClicked && 'App__hiden'}`}\n          onClick={this.reverseHandler}\n        >\n          Reverse\n        </button>\n        <button\n          type=\"button\"\n          className={`App__btn ${!isClicked && 'App__hiden'}`}\n          onClick={() => this.sortHandler(ColumnTypes.alpha)}\n        >\n          Sort alphabetically\n        </button>\n        <button\n          type=\"button\"\n          className={`App__btn ${!isClicked && 'App__hiden'}`}\n          onClick={this.resetHandler}\n        >\n          Reset\n        </button>\n        <button\n          type=\"button\"\n          className={`App__btn ${!isClicked && 'App__hiden'}`}\n          onClick={() => this.sortHandler(ColumnTypes.length)}\n        >\n          Sort by length\n        </button>\n        <ul className=\"App__list\">\n          {isClicked && listModified.map(good => (\n            <li\n              key={good}\n              className=\"App__item\"\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}